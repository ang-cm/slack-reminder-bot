from flask import Flask, request, jsonify
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import os

app = Flask(__name__)

# Slack credentials and config
slack_token = os.environ.get("SLACK_BOT_TOKEN")
signing_secret = os.environ.get("SLACK_SIGNING_SECRET")
channel_id = os.environ.get("CHANNEL_ID")
client = WebClient(token=slack_token)

# In-memory ticket tracking
tickets = {}

@app.route("/slack/events", methods=["POST"])
def slack_events():
    data = request.get_json()

    # ✅ Handle Slack's challenge verification
    if data.get("type") == "url_verification":
        return jsonify({"challenge": data["challenge"]})

    # Handle reaction_added events
    if data.get("type") == "event_callback":
        event = data.get("event", {})
        if event.get("type") == "reaction_added":
            ts = event.get("item", {}).get("ts")
            user_reacted = event.get("user")
            reaction = event.get("reaction")

            print(f"Reaction {reaction} added by {user_reacted} to message {ts}")

            # Stop tracking if ✅ emoji is added
            if reaction == "white_check_mark":
                for ticket_id, info in list(tickets.items()):
                    if info['ts'] == ts:
                        print(f"✅ Ticket {ticket_id} marked complete.")
                        del tickets[ticket_id]

    return "", 200

@app.route("/new_ticket", methods=["POST"])
def new_ticket():
    data = request.json
    ticket_id = data['ticket_id']
    assignee_slack_id = data['assignee_slack_id']
    message_ts = data['message_ts']

    tickets[ticket_id] = {
        "ts": message_ts,
        "assignee_slack_id": assignee_slack_id,
        "last_reminder": datetime.now()
    }

    print(f"[+] Tracking ticket {ticket_id} for <@{assignee_slack_id}>")
    return {"status": "ok"}, 200

def check_reactions():
    for ticket_id, info in list(tickets.items()):
        try:
            res = client.reactions_get(channel=channel_id, timestamp=info['ts'])
            reactions = res['message'].get('reactions', [])
            has_check = any(r['name'] == 'white_check_mark' for r in reactions)

            if has_check:
                print(f"✅ Ticket {ticket_id} resolved.")
                del tickets[ticket_id]
            else:
                now = datetime.now()
                if now - info['last_reminder'] >= timedelta(hours=4):
                    client.chat_postMessage(
                        channel=channel_id,
                        text=f"<@{info['assignee_slack_id']}> Reminder: please follow up on ticket {ticket_id}"
                    )
                    tickets[ticket_id]['last_reminder'] = now

        except SlackApiError as e:
            print(f"Slack error: {e.response['error']}")

# Scheduler to run every 10 minutes
scheduler = BackgroundScheduler()
scheduler.add_job(func=check_reactions, trigger="interval", minutes=10)
scheduler.start()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
